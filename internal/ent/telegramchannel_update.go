// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ernado/tentacle/internal/ent/predicate"
	"github.com/ernado/tentacle/internal/ent/telegramchannel"
)

// TelegramChannelUpdate is the builder for updating TelegramChannel entities.
type TelegramChannelUpdate struct {
	config
	hooks    []Hook
	mutation *TelegramChannelMutation
}

// Where appends a list predicates to the TelegramChannelUpdate builder.
func (_u *TelegramChannelUpdate) Where(ps ...predicate.TelegramChannel) *TelegramChannelUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAccessHash sets the "access_hash" field.
func (_u *TelegramChannelUpdate) SetAccessHash(v int64) *TelegramChannelUpdate {
	_u.mutation.ResetAccessHash()
	_u.mutation.SetAccessHash(v)
	return _u
}

// SetNillableAccessHash sets the "access_hash" field if the given value is not nil.
func (_u *TelegramChannelUpdate) SetNillableAccessHash(v *int64) *TelegramChannelUpdate {
	if v != nil {
		_u.SetAccessHash(*v)
	}
	return _u
}

// AddAccessHash adds value to the "access_hash" field.
func (_u *TelegramChannelUpdate) AddAccessHash(v int64) *TelegramChannelUpdate {
	_u.mutation.AddAccessHash(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *TelegramChannelUpdate) SetTitle(v string) *TelegramChannelUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TelegramChannelUpdate) SetNillableTitle(v *string) *TelegramChannelUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetSaveRecords sets the "save_records" field.
func (_u *TelegramChannelUpdate) SetSaveRecords(v bool) *TelegramChannelUpdate {
	_u.mutation.SetSaveRecords(v)
	return _u
}

// SetNillableSaveRecords sets the "save_records" field if the given value is not nil.
func (_u *TelegramChannelUpdate) SetNillableSaveRecords(v *bool) *TelegramChannelUpdate {
	if v != nil {
		_u.SetSaveRecords(*v)
	}
	return _u
}

// ClearSaveRecords clears the value of the "save_records" field.
func (_u *TelegramChannelUpdate) ClearSaveRecords() *TelegramChannelUpdate {
	_u.mutation.ClearSaveRecords()
	return _u
}

// SetSaveFavoriteRecords sets the "save_favorite_records" field.
func (_u *TelegramChannelUpdate) SetSaveFavoriteRecords(v bool) *TelegramChannelUpdate {
	_u.mutation.SetSaveFavoriteRecords(v)
	return _u
}

// SetNillableSaveFavoriteRecords sets the "save_favorite_records" field if the given value is not nil.
func (_u *TelegramChannelUpdate) SetNillableSaveFavoriteRecords(v *bool) *TelegramChannelUpdate {
	if v != nil {
		_u.SetSaveFavoriteRecords(*v)
	}
	return _u
}

// ClearSaveFavoriteRecords clears the value of the "save_favorite_records" field.
func (_u *TelegramChannelUpdate) ClearSaveFavoriteRecords() *TelegramChannelUpdate {
	_u.mutation.ClearSaveFavoriteRecords()
	return _u
}

// SetActive sets the "active" field.
func (_u *TelegramChannelUpdate) SetActive(v bool) *TelegramChannelUpdate {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *TelegramChannelUpdate) SetNillableActive(v *bool) *TelegramChannelUpdate {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// Mutation returns the TelegramChannelMutation object of the builder.
func (_u *TelegramChannelUpdate) Mutation() *TelegramChannelMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TelegramChannelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TelegramChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TelegramChannelUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TelegramChannelUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TelegramChannelUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramchannel.Table, telegramchannel.Columns, sqlgraph.NewFieldSpec(telegramchannel.FieldID, field.TypeInt64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AccessHash(); ok {
		_spec.SetField(telegramchannel.FieldAccessHash, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedAccessHash(); ok {
		_spec.AddField(telegramchannel.FieldAccessHash, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(telegramchannel.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.SaveRecords(); ok {
		_spec.SetField(telegramchannel.FieldSaveRecords, field.TypeBool, value)
	}
	if _u.mutation.SaveRecordsCleared() {
		_spec.ClearField(telegramchannel.FieldSaveRecords, field.TypeBool)
	}
	if value, ok := _u.mutation.SaveFavoriteRecords(); ok {
		_spec.SetField(telegramchannel.FieldSaveFavoriteRecords, field.TypeBool, value)
	}
	if _u.mutation.SaveFavoriteRecordsCleared() {
		_spec.ClearField(telegramchannel.FieldSaveFavoriteRecords, field.TypeBool)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(telegramchannel.FieldActive, field.TypeBool, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TelegramChannelUpdateOne is the builder for updating a single TelegramChannel entity.
type TelegramChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelegramChannelMutation
}

// SetAccessHash sets the "access_hash" field.
func (_u *TelegramChannelUpdateOne) SetAccessHash(v int64) *TelegramChannelUpdateOne {
	_u.mutation.ResetAccessHash()
	_u.mutation.SetAccessHash(v)
	return _u
}

// SetNillableAccessHash sets the "access_hash" field if the given value is not nil.
func (_u *TelegramChannelUpdateOne) SetNillableAccessHash(v *int64) *TelegramChannelUpdateOne {
	if v != nil {
		_u.SetAccessHash(*v)
	}
	return _u
}

// AddAccessHash adds value to the "access_hash" field.
func (_u *TelegramChannelUpdateOne) AddAccessHash(v int64) *TelegramChannelUpdateOne {
	_u.mutation.AddAccessHash(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *TelegramChannelUpdateOne) SetTitle(v string) *TelegramChannelUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TelegramChannelUpdateOne) SetNillableTitle(v *string) *TelegramChannelUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetSaveRecords sets the "save_records" field.
func (_u *TelegramChannelUpdateOne) SetSaveRecords(v bool) *TelegramChannelUpdateOne {
	_u.mutation.SetSaveRecords(v)
	return _u
}

// SetNillableSaveRecords sets the "save_records" field if the given value is not nil.
func (_u *TelegramChannelUpdateOne) SetNillableSaveRecords(v *bool) *TelegramChannelUpdateOne {
	if v != nil {
		_u.SetSaveRecords(*v)
	}
	return _u
}

// ClearSaveRecords clears the value of the "save_records" field.
func (_u *TelegramChannelUpdateOne) ClearSaveRecords() *TelegramChannelUpdateOne {
	_u.mutation.ClearSaveRecords()
	return _u
}

// SetSaveFavoriteRecords sets the "save_favorite_records" field.
func (_u *TelegramChannelUpdateOne) SetSaveFavoriteRecords(v bool) *TelegramChannelUpdateOne {
	_u.mutation.SetSaveFavoriteRecords(v)
	return _u
}

// SetNillableSaveFavoriteRecords sets the "save_favorite_records" field if the given value is not nil.
func (_u *TelegramChannelUpdateOne) SetNillableSaveFavoriteRecords(v *bool) *TelegramChannelUpdateOne {
	if v != nil {
		_u.SetSaveFavoriteRecords(*v)
	}
	return _u
}

// ClearSaveFavoriteRecords clears the value of the "save_favorite_records" field.
func (_u *TelegramChannelUpdateOne) ClearSaveFavoriteRecords() *TelegramChannelUpdateOne {
	_u.mutation.ClearSaveFavoriteRecords()
	return _u
}

// SetActive sets the "active" field.
func (_u *TelegramChannelUpdateOne) SetActive(v bool) *TelegramChannelUpdateOne {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *TelegramChannelUpdateOne) SetNillableActive(v *bool) *TelegramChannelUpdateOne {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// Mutation returns the TelegramChannelMutation object of the builder.
func (_u *TelegramChannelUpdateOne) Mutation() *TelegramChannelMutation {
	return _u.mutation
}

// Where appends a list predicates to the TelegramChannelUpdate builder.
func (_u *TelegramChannelUpdateOne) Where(ps ...predicate.TelegramChannel) *TelegramChannelUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TelegramChannelUpdateOne) Select(field string, fields ...string) *TelegramChannelUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TelegramChannel entity.
func (_u *TelegramChannelUpdateOne) Save(ctx context.Context) (*TelegramChannel, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TelegramChannelUpdateOne) SaveX(ctx context.Context) *TelegramChannel {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TelegramChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TelegramChannelUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TelegramChannelUpdateOne) sqlSave(ctx context.Context) (_node *TelegramChannel, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramchannel.Table, telegramchannel.Columns, sqlgraph.NewFieldSpec(telegramchannel.FieldID, field.TypeInt64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelegramChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramchannel.FieldID)
		for _, f := range fields {
			if !telegramchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telegramchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AccessHash(); ok {
		_spec.SetField(telegramchannel.FieldAccessHash, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedAccessHash(); ok {
		_spec.AddField(telegramchannel.FieldAccessHash, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(telegramchannel.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.SaveRecords(); ok {
		_spec.SetField(telegramchannel.FieldSaveRecords, field.TypeBool, value)
	}
	if _u.mutation.SaveRecordsCleared() {
		_spec.ClearField(telegramchannel.FieldSaveRecords, field.TypeBool)
	}
	if value, ok := _u.mutation.SaveFavoriteRecords(); ok {
		_spec.SetField(telegramchannel.FieldSaveFavoriteRecords, field.TypeBool, value)
	}
	if _u.mutation.SaveFavoriteRecordsCleared() {
		_spec.ClearField(telegramchannel.FieldSaveFavoriteRecords, field.TypeBool)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(telegramchannel.FieldActive, field.TypeBool, value)
	}
	_node = &TelegramChannel{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
