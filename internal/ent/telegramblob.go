// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ernado/tentacle/internal/ent/telegramblob"
	"github.com/google/uuid"
)

// TelegramBlob is the model entity for the TelegramBlob schema.
type TelegramBlob struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Size holds the value of the "size" field.
	Size int64 `json:"size,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// URI holds the value of the "uri" field.
	URI string `json:"uri,omitempty"`
	// hex
	Sha256 string `json:"sha256,omitempty"`
	// FileReference holds the value of the "file_reference" field.
	FileReference []byte `json:"file_reference,omitempty"`
	// FileID holds the value of the "file_id" field.
	FileID int64 `json:"file_id,omitempty"`
	// AccessHash holds the value of the "access_hash" field.
	AccessHash   int64 `json:"access_hash,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelegramBlob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telegramblob.FieldFileReference:
			values[i] = new([]byte)
		case telegramblob.FieldSize, telegramblob.FieldFileID, telegramblob.FieldAccessHash:
			values[i] = new(sql.NullInt64)
		case telegramblob.FieldPath, telegramblob.FieldURI, telegramblob.FieldSha256:
			values[i] = new(sql.NullString)
		case telegramblob.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelegramBlob fields.
func (_m *TelegramBlob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telegramblob.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case telegramblob.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				_m.Size = value.Int64
			}
		case telegramblob.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				_m.Path = value.String
			}
		case telegramblob.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				_m.URI = value.String
			}
		case telegramblob.FieldSha256:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sha256", values[i])
			} else if value.Valid {
				_m.Sha256 = value.String
			}
		case telegramblob.FieldFileReference:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field file_reference", values[i])
			} else if value != nil {
				_m.FileReference = *value
			}
		case telegramblob.FieldFileID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				_m.FileID = value.Int64
			}
		case telegramblob.FieldAccessHash:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field access_hash", values[i])
			} else if value.Valid {
				_m.AccessHash = value.Int64
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TelegramBlob.
// This includes values selected through modifiers, order, etc.
func (_m *TelegramBlob) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this TelegramBlob.
// Note that you need to call TelegramBlob.Unwrap() before calling this method if this TelegramBlob
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TelegramBlob) Update() *TelegramBlobUpdateOne {
	return NewTelegramBlobClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TelegramBlob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TelegramBlob) Unwrap() *TelegramBlob {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelegramBlob is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TelegramBlob) String() string {
	var builder strings.Builder
	builder.WriteString("TelegramBlob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", _m.Size))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(_m.Path)
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(_m.URI)
	builder.WriteString(", ")
	builder.WriteString("sha256=")
	builder.WriteString(_m.Sha256)
	builder.WriteString(", ")
	builder.WriteString("file_reference=")
	builder.WriteString(fmt.Sprintf("%v", _m.FileReference))
	builder.WriteString(", ")
	builder.WriteString("file_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.FileID))
	builder.WriteString(", ")
	builder.WriteString("access_hash=")
	builder.WriteString(fmt.Sprintf("%v", _m.AccessHash))
	builder.WriteByte(')')
	return builder.String()
}

// TelegramBlobs is a parsable slice of TelegramBlob.
type TelegramBlobs []*TelegramBlob
