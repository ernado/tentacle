// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ernado/tentacle/internal/ent/predicate"
	"github.com/ernado/tentacle/internal/ent/telegramblob"
)

// TelegramBlobUpdate is the builder for updating TelegramBlob entities.
type TelegramBlobUpdate struct {
	config
	hooks    []Hook
	mutation *TelegramBlobMutation
}

// Where appends a list predicates to the TelegramBlobUpdate builder.
func (_u *TelegramBlobUpdate) Where(ps ...predicate.TelegramBlob) *TelegramBlobUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSize sets the "size" field.
func (_u *TelegramBlobUpdate) SetSize(v int64) *TelegramBlobUpdate {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *TelegramBlobUpdate) SetNillableSize(v *int64) *TelegramBlobUpdate {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *TelegramBlobUpdate) AddSize(v int64) *TelegramBlobUpdate {
	_u.mutation.AddSize(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *TelegramBlobUpdate) SetPath(v string) *TelegramBlobUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *TelegramBlobUpdate) SetNillablePath(v *string) *TelegramBlobUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetURI sets the "uri" field.
func (_u *TelegramBlobUpdate) SetURI(v string) *TelegramBlobUpdate {
	_u.mutation.SetURI(v)
	return _u
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (_u *TelegramBlobUpdate) SetNillableURI(v *string) *TelegramBlobUpdate {
	if v != nil {
		_u.SetURI(*v)
	}
	return _u
}

// SetSha256 sets the "sha256" field.
func (_u *TelegramBlobUpdate) SetSha256(v string) *TelegramBlobUpdate {
	_u.mutation.SetSha256(v)
	return _u
}

// SetNillableSha256 sets the "sha256" field if the given value is not nil.
func (_u *TelegramBlobUpdate) SetNillableSha256(v *string) *TelegramBlobUpdate {
	if v != nil {
		_u.SetSha256(*v)
	}
	return _u
}

// SetFileReference sets the "file_reference" field.
func (_u *TelegramBlobUpdate) SetFileReference(v []byte) *TelegramBlobUpdate {
	_u.mutation.SetFileReference(v)
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *TelegramBlobUpdate) SetFileID(v int64) *TelegramBlobUpdate {
	_u.mutation.ResetFileID()
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *TelegramBlobUpdate) SetNillableFileID(v *int64) *TelegramBlobUpdate {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// AddFileID adds value to the "file_id" field.
func (_u *TelegramBlobUpdate) AddFileID(v int64) *TelegramBlobUpdate {
	_u.mutation.AddFileID(v)
	return _u
}

// SetAccessHash sets the "access_hash" field.
func (_u *TelegramBlobUpdate) SetAccessHash(v int64) *TelegramBlobUpdate {
	_u.mutation.ResetAccessHash()
	_u.mutation.SetAccessHash(v)
	return _u
}

// SetNillableAccessHash sets the "access_hash" field if the given value is not nil.
func (_u *TelegramBlobUpdate) SetNillableAccessHash(v *int64) *TelegramBlobUpdate {
	if v != nil {
		_u.SetAccessHash(*v)
	}
	return _u
}

// AddAccessHash adds value to the "access_hash" field.
func (_u *TelegramBlobUpdate) AddAccessHash(v int64) *TelegramBlobUpdate {
	_u.mutation.AddAccessHash(v)
	return _u
}

// Mutation returns the TelegramBlobMutation object of the builder.
func (_u *TelegramBlobUpdate) Mutation() *TelegramBlobMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TelegramBlobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TelegramBlobUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TelegramBlobUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TelegramBlobUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TelegramBlobUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramblob.Table, telegramblob.Columns, sqlgraph.NewFieldSpec(telegramblob.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(telegramblob.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(telegramblob.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(telegramblob.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.URI(); ok {
		_spec.SetField(telegramblob.FieldURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.Sha256(); ok {
		_spec.SetField(telegramblob.FieldSha256, field.TypeString, value)
	}
	if value, ok := _u.mutation.FileReference(); ok {
		_spec.SetField(telegramblob.FieldFileReference, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(telegramblob.FieldFileID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedFileID(); ok {
		_spec.AddField(telegramblob.FieldFileID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AccessHash(); ok {
		_spec.SetField(telegramblob.FieldAccessHash, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedAccessHash(); ok {
		_spec.AddField(telegramblob.FieldAccessHash, field.TypeInt64, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramblob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TelegramBlobUpdateOne is the builder for updating a single TelegramBlob entity.
type TelegramBlobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelegramBlobMutation
}

// SetSize sets the "size" field.
func (_u *TelegramBlobUpdateOne) SetSize(v int64) *TelegramBlobUpdateOne {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *TelegramBlobUpdateOne) SetNillableSize(v *int64) *TelegramBlobUpdateOne {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *TelegramBlobUpdateOne) AddSize(v int64) *TelegramBlobUpdateOne {
	_u.mutation.AddSize(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *TelegramBlobUpdateOne) SetPath(v string) *TelegramBlobUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *TelegramBlobUpdateOne) SetNillablePath(v *string) *TelegramBlobUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetURI sets the "uri" field.
func (_u *TelegramBlobUpdateOne) SetURI(v string) *TelegramBlobUpdateOne {
	_u.mutation.SetURI(v)
	return _u
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (_u *TelegramBlobUpdateOne) SetNillableURI(v *string) *TelegramBlobUpdateOne {
	if v != nil {
		_u.SetURI(*v)
	}
	return _u
}

// SetSha256 sets the "sha256" field.
func (_u *TelegramBlobUpdateOne) SetSha256(v string) *TelegramBlobUpdateOne {
	_u.mutation.SetSha256(v)
	return _u
}

// SetNillableSha256 sets the "sha256" field if the given value is not nil.
func (_u *TelegramBlobUpdateOne) SetNillableSha256(v *string) *TelegramBlobUpdateOne {
	if v != nil {
		_u.SetSha256(*v)
	}
	return _u
}

// SetFileReference sets the "file_reference" field.
func (_u *TelegramBlobUpdateOne) SetFileReference(v []byte) *TelegramBlobUpdateOne {
	_u.mutation.SetFileReference(v)
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *TelegramBlobUpdateOne) SetFileID(v int64) *TelegramBlobUpdateOne {
	_u.mutation.ResetFileID()
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *TelegramBlobUpdateOne) SetNillableFileID(v *int64) *TelegramBlobUpdateOne {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// AddFileID adds value to the "file_id" field.
func (_u *TelegramBlobUpdateOne) AddFileID(v int64) *TelegramBlobUpdateOne {
	_u.mutation.AddFileID(v)
	return _u
}

// SetAccessHash sets the "access_hash" field.
func (_u *TelegramBlobUpdateOne) SetAccessHash(v int64) *TelegramBlobUpdateOne {
	_u.mutation.ResetAccessHash()
	_u.mutation.SetAccessHash(v)
	return _u
}

// SetNillableAccessHash sets the "access_hash" field if the given value is not nil.
func (_u *TelegramBlobUpdateOne) SetNillableAccessHash(v *int64) *TelegramBlobUpdateOne {
	if v != nil {
		_u.SetAccessHash(*v)
	}
	return _u
}

// AddAccessHash adds value to the "access_hash" field.
func (_u *TelegramBlobUpdateOne) AddAccessHash(v int64) *TelegramBlobUpdateOne {
	_u.mutation.AddAccessHash(v)
	return _u
}

// Mutation returns the TelegramBlobMutation object of the builder.
func (_u *TelegramBlobUpdateOne) Mutation() *TelegramBlobMutation {
	return _u.mutation
}

// Where appends a list predicates to the TelegramBlobUpdate builder.
func (_u *TelegramBlobUpdateOne) Where(ps ...predicate.TelegramBlob) *TelegramBlobUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TelegramBlobUpdateOne) Select(field string, fields ...string) *TelegramBlobUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TelegramBlob entity.
func (_u *TelegramBlobUpdateOne) Save(ctx context.Context) (*TelegramBlob, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TelegramBlobUpdateOne) SaveX(ctx context.Context) *TelegramBlob {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TelegramBlobUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TelegramBlobUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TelegramBlobUpdateOne) sqlSave(ctx context.Context) (_node *TelegramBlob, err error) {
	_spec := sqlgraph.NewUpdateSpec(telegramblob.Table, telegramblob.Columns, sqlgraph.NewFieldSpec(telegramblob.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelegramBlob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramblob.FieldID)
		for _, f := range fields {
			if !telegramblob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telegramblob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(telegramblob.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(telegramblob.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(telegramblob.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.URI(); ok {
		_spec.SetField(telegramblob.FieldURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.Sha256(); ok {
		_spec.SetField(telegramblob.FieldSha256, field.TypeString, value)
	}
	if value, ok := _u.mutation.FileReference(); ok {
		_spec.SetField(telegramblob.FieldFileReference, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(telegramblob.FieldFileID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedFileID(); ok {
		_spec.AddField(telegramblob.FieldFileID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AccessHash(); ok {
		_spec.SetField(telegramblob.FieldAccessHash, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedAccessHash(); ok {
		_spec.AddField(telegramblob.FieldAccessHash, field.TypeInt64, value)
	}
	_node = &TelegramBlob{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramblob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
