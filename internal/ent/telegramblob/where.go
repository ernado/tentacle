// Code generated by ent, DO NOT EDIT.

package telegramblob

import (
	"entgo.io/ent/dialect/sql"
	"github.com/ernado/tentacle/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLTE(FieldID, id))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldSize, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldPath, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldURI, v))
}

// Sha256 applies equality check predicate on the "sha256" field. It's identical to Sha256EQ.
func Sha256(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldSha256, v))
}

// FileReference applies equality check predicate on the "file_reference" field. It's identical to FileReferenceEQ.
func FileReference(v []byte) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldFileReference, v))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldFileID, v))
}

// AccessHash applies equality check predicate on the "access_hash" field. It's identical to AccessHashEQ.
func AccessHash(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldAccessHash, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLTE(FieldSize, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldContainsFold(FieldPath, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldContainsFold(FieldURI, v))
}

// Sha256EQ applies the EQ predicate on the "sha256" field.
func Sha256EQ(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldSha256, v))
}

// Sha256NEQ applies the NEQ predicate on the "sha256" field.
func Sha256NEQ(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNEQ(FieldSha256, v))
}

// Sha256In applies the In predicate on the "sha256" field.
func Sha256In(vs ...string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldIn(FieldSha256, vs...))
}

// Sha256NotIn applies the NotIn predicate on the "sha256" field.
func Sha256NotIn(vs ...string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNotIn(FieldSha256, vs...))
}

// Sha256GT applies the GT predicate on the "sha256" field.
func Sha256GT(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGT(FieldSha256, v))
}

// Sha256GTE applies the GTE predicate on the "sha256" field.
func Sha256GTE(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGTE(FieldSha256, v))
}

// Sha256LT applies the LT predicate on the "sha256" field.
func Sha256LT(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLT(FieldSha256, v))
}

// Sha256LTE applies the LTE predicate on the "sha256" field.
func Sha256LTE(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLTE(FieldSha256, v))
}

// Sha256Contains applies the Contains predicate on the "sha256" field.
func Sha256Contains(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldContains(FieldSha256, v))
}

// Sha256HasPrefix applies the HasPrefix predicate on the "sha256" field.
func Sha256HasPrefix(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldHasPrefix(FieldSha256, v))
}

// Sha256HasSuffix applies the HasSuffix predicate on the "sha256" field.
func Sha256HasSuffix(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldHasSuffix(FieldSha256, v))
}

// Sha256EqualFold applies the EqualFold predicate on the "sha256" field.
func Sha256EqualFold(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEqualFold(FieldSha256, v))
}

// Sha256ContainsFold applies the ContainsFold predicate on the "sha256" field.
func Sha256ContainsFold(v string) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldContainsFold(FieldSha256, v))
}

// FileReferenceEQ applies the EQ predicate on the "file_reference" field.
func FileReferenceEQ(v []byte) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldFileReference, v))
}

// FileReferenceNEQ applies the NEQ predicate on the "file_reference" field.
func FileReferenceNEQ(v []byte) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNEQ(FieldFileReference, v))
}

// FileReferenceIn applies the In predicate on the "file_reference" field.
func FileReferenceIn(vs ...[]byte) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldIn(FieldFileReference, vs...))
}

// FileReferenceNotIn applies the NotIn predicate on the "file_reference" field.
func FileReferenceNotIn(vs ...[]byte) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNotIn(FieldFileReference, vs...))
}

// FileReferenceGT applies the GT predicate on the "file_reference" field.
func FileReferenceGT(v []byte) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGT(FieldFileReference, v))
}

// FileReferenceGTE applies the GTE predicate on the "file_reference" field.
func FileReferenceGTE(v []byte) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGTE(FieldFileReference, v))
}

// FileReferenceLT applies the LT predicate on the "file_reference" field.
func FileReferenceLT(v []byte) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLT(FieldFileReference, v))
}

// FileReferenceLTE applies the LTE predicate on the "file_reference" field.
func FileReferenceLTE(v []byte) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLTE(FieldFileReference, v))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNotIn(FieldFileID, vs...))
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGT(FieldFileID, v))
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGTE(FieldFileID, v))
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLT(FieldFileID, v))
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLTE(FieldFileID, v))
}

// AccessHashEQ applies the EQ predicate on the "access_hash" field.
func AccessHashEQ(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldEQ(FieldAccessHash, v))
}

// AccessHashNEQ applies the NEQ predicate on the "access_hash" field.
func AccessHashNEQ(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNEQ(FieldAccessHash, v))
}

// AccessHashIn applies the In predicate on the "access_hash" field.
func AccessHashIn(vs ...int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldIn(FieldAccessHash, vs...))
}

// AccessHashNotIn applies the NotIn predicate on the "access_hash" field.
func AccessHashNotIn(vs ...int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldNotIn(FieldAccessHash, vs...))
}

// AccessHashGT applies the GT predicate on the "access_hash" field.
func AccessHashGT(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGT(FieldAccessHash, v))
}

// AccessHashGTE applies the GTE predicate on the "access_hash" field.
func AccessHashGTE(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldGTE(FieldAccessHash, v))
}

// AccessHashLT applies the LT predicate on the "access_hash" field.
func AccessHashLT(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLT(FieldAccessHash, v))
}

// AccessHashLTE applies the LTE predicate on the "access_hash" field.
func AccessHashLTE(v int64) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.FieldLTE(FieldAccessHash, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TelegramBlob) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TelegramBlob) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TelegramBlob) predicate.TelegramBlob {
	return predicate.TelegramBlob(sql.NotPredicates(p))
}
