// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ernado/tentacle/internal/ent/telegramchannel"
)

// TelegramChannel is the model entity for the TelegramChannel schema.
type TelegramChannel struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// AccessHash holds the value of the "access_hash" field.
	AccessHash int64 `json:"access_hash,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// SaveRecords holds the value of the "save_records" field.
	SaveRecords bool `json:"save_records,omitempty"`
	// SaveFavoriteRecords holds the value of the "save_favorite_records" field.
	SaveFavoriteRecords bool `json:"save_favorite_records,omitempty"`
	// Active holds the value of the "active" field.
	Active       bool `json:"active,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelegramChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telegramchannel.FieldSaveRecords, telegramchannel.FieldSaveFavoriteRecords, telegramchannel.FieldActive:
			values[i] = new(sql.NullBool)
		case telegramchannel.FieldID, telegramchannel.FieldAccessHash:
			values[i] = new(sql.NullInt64)
		case telegramchannel.FieldTitle:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelegramChannel fields.
func (_m *TelegramChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telegramchannel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int64(value.Int64)
		case telegramchannel.FieldAccessHash:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field access_hash", values[i])
			} else if value.Valid {
				_m.AccessHash = value.Int64
			}
		case telegramchannel.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case telegramchannel.FieldSaveRecords:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field save_records", values[i])
			} else if value.Valid {
				_m.SaveRecords = value.Bool
			}
		case telegramchannel.FieldSaveFavoriteRecords:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field save_favorite_records", values[i])
			} else if value.Valid {
				_m.SaveFavoriteRecords = value.Bool
			}
		case telegramchannel.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				_m.Active = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TelegramChannel.
// This includes values selected through modifiers, order, etc.
func (_m *TelegramChannel) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this TelegramChannel.
// Note that you need to call TelegramChannel.Unwrap() before calling this method if this TelegramChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TelegramChannel) Update() *TelegramChannelUpdateOne {
	return NewTelegramChannelClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TelegramChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TelegramChannel) Unwrap() *TelegramChannel {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelegramChannel is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TelegramChannel) String() string {
	var builder strings.Builder
	builder.WriteString("TelegramChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("access_hash=")
	builder.WriteString(fmt.Sprintf("%v", _m.AccessHash))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("save_records=")
	builder.WriteString(fmt.Sprintf("%v", _m.SaveRecords))
	builder.WriteString(", ")
	builder.WriteString("save_favorite_records=")
	builder.WriteString(fmt.Sprintf("%v", _m.SaveFavoriteRecords))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", _m.Active))
	builder.WriteByte(')')
	return builder.String()
}

// TelegramChannels is a parsable slice of TelegramChannel.
type TelegramChannels []*TelegramChannel
