// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ernado/tentacle/internal/ent/telegramblob"
	"github.com/google/uuid"
)

// TelegramBlobCreate is the builder for creating a TelegramBlob entity.
type TelegramBlobCreate struct {
	config
	mutation *TelegramBlobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSize sets the "size" field.
func (_c *TelegramBlobCreate) SetSize(v int64) *TelegramBlobCreate {
	_c.mutation.SetSize(v)
	return _c
}

// SetPath sets the "path" field.
func (_c *TelegramBlobCreate) SetPath(v string) *TelegramBlobCreate {
	_c.mutation.SetPath(v)
	return _c
}

// SetURI sets the "uri" field.
func (_c *TelegramBlobCreate) SetURI(v string) *TelegramBlobCreate {
	_c.mutation.SetURI(v)
	return _c
}

// SetSha256 sets the "sha256" field.
func (_c *TelegramBlobCreate) SetSha256(v string) *TelegramBlobCreate {
	_c.mutation.SetSha256(v)
	return _c
}

// SetFileReference sets the "file_reference" field.
func (_c *TelegramBlobCreate) SetFileReference(v []byte) *TelegramBlobCreate {
	_c.mutation.SetFileReference(v)
	return _c
}

// SetFileID sets the "file_id" field.
func (_c *TelegramBlobCreate) SetFileID(v int64) *TelegramBlobCreate {
	_c.mutation.SetFileID(v)
	return _c
}

// SetAccessHash sets the "access_hash" field.
func (_c *TelegramBlobCreate) SetAccessHash(v int64) *TelegramBlobCreate {
	_c.mutation.SetAccessHash(v)
	return _c
}

// SetID sets the "id" field.
func (_c *TelegramBlobCreate) SetID(v uuid.UUID) *TelegramBlobCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TelegramBlobCreate) SetNillableID(v *uuid.UUID) *TelegramBlobCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the TelegramBlobMutation object of the builder.
func (_c *TelegramBlobCreate) Mutation() *TelegramBlobMutation {
	return _c.mutation
}

// Save creates the TelegramBlob in the database.
func (_c *TelegramBlobCreate) Save(ctx context.Context) (*TelegramBlob, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TelegramBlobCreate) SaveX(ctx context.Context) *TelegramBlob {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TelegramBlobCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TelegramBlobCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TelegramBlobCreate) defaults() {
	if _, ok := _c.mutation.ID(); !ok {
		v := telegramblob.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TelegramBlobCreate) check() error {
	if _, ok := _c.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "TelegramBlob.size"`)}
	}
	if _, ok := _c.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "TelegramBlob.path"`)}
	}
	if _, ok := _c.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`ent: missing required field "TelegramBlob.uri"`)}
	}
	if _, ok := _c.mutation.Sha256(); !ok {
		return &ValidationError{Name: "sha256", err: errors.New(`ent: missing required field "TelegramBlob.sha256"`)}
	}
	if _, ok := _c.mutation.FileReference(); !ok {
		return &ValidationError{Name: "file_reference", err: errors.New(`ent: missing required field "TelegramBlob.file_reference"`)}
	}
	if _, ok := _c.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "TelegramBlob.file_id"`)}
	}
	if _, ok := _c.mutation.AccessHash(); !ok {
		return &ValidationError{Name: "access_hash", err: errors.New(`ent: missing required field "TelegramBlob.access_hash"`)}
	}
	return nil
}

func (_c *TelegramBlobCreate) sqlSave(ctx context.Context) (*TelegramBlob, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TelegramBlobCreate) createSpec() (*TelegramBlob, *sqlgraph.CreateSpec) {
	var (
		_node = &TelegramBlob{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(telegramblob.Table, sqlgraph.NewFieldSpec(telegramblob.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Size(); ok {
		_spec.SetField(telegramblob.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := _c.mutation.Path(); ok {
		_spec.SetField(telegramblob.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := _c.mutation.URI(); ok {
		_spec.SetField(telegramblob.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := _c.mutation.Sha256(); ok {
		_spec.SetField(telegramblob.FieldSha256, field.TypeString, value)
		_node.Sha256 = value
	}
	if value, ok := _c.mutation.FileReference(); ok {
		_spec.SetField(telegramblob.FieldFileReference, field.TypeBytes, value)
		_node.FileReference = value
	}
	if value, ok := _c.mutation.FileID(); ok {
		_spec.SetField(telegramblob.FieldFileID, field.TypeInt64, value)
		_node.FileID = value
	}
	if value, ok := _c.mutation.AccessHash(); ok {
		_spec.SetField(telegramblob.FieldAccessHash, field.TypeInt64, value)
		_node.AccessHash = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramBlob.Create().
//		SetSize(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramBlobUpsert) {
//			SetSize(v+v).
//		}).
//		Exec(ctx)
func (_c *TelegramBlobCreate) OnConflict(opts ...sql.ConflictOption) *TelegramBlobUpsertOne {
	_c.conflict = opts
	return &TelegramBlobUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramBlob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TelegramBlobCreate) OnConflictColumns(columns ...string) *TelegramBlobUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TelegramBlobUpsertOne{
		create: _c,
	}
}

type (
	// TelegramBlobUpsertOne is the builder for "upsert"-ing
	//  one TelegramBlob node.
	TelegramBlobUpsertOne struct {
		create *TelegramBlobCreate
	}

	// TelegramBlobUpsert is the "OnConflict" setter.
	TelegramBlobUpsert struct {
		*sql.UpdateSet
	}
)

// SetSize sets the "size" field.
func (u *TelegramBlobUpsert) SetSize(v int64) *TelegramBlobUpsert {
	u.Set(telegramblob.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *TelegramBlobUpsert) UpdateSize() *TelegramBlobUpsert {
	u.SetExcluded(telegramblob.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *TelegramBlobUpsert) AddSize(v int64) *TelegramBlobUpsert {
	u.Add(telegramblob.FieldSize, v)
	return u
}

// SetPath sets the "path" field.
func (u *TelegramBlobUpsert) SetPath(v string) *TelegramBlobUpsert {
	u.Set(telegramblob.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *TelegramBlobUpsert) UpdatePath() *TelegramBlobUpsert {
	u.SetExcluded(telegramblob.FieldPath)
	return u
}

// SetURI sets the "uri" field.
func (u *TelegramBlobUpsert) SetURI(v string) *TelegramBlobUpsert {
	u.Set(telegramblob.FieldURI, v)
	return u
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *TelegramBlobUpsert) UpdateURI() *TelegramBlobUpsert {
	u.SetExcluded(telegramblob.FieldURI)
	return u
}

// SetSha256 sets the "sha256" field.
func (u *TelegramBlobUpsert) SetSha256(v string) *TelegramBlobUpsert {
	u.Set(telegramblob.FieldSha256, v)
	return u
}

// UpdateSha256 sets the "sha256" field to the value that was provided on create.
func (u *TelegramBlobUpsert) UpdateSha256() *TelegramBlobUpsert {
	u.SetExcluded(telegramblob.FieldSha256)
	return u
}

// SetFileReference sets the "file_reference" field.
func (u *TelegramBlobUpsert) SetFileReference(v []byte) *TelegramBlobUpsert {
	u.Set(telegramblob.FieldFileReference, v)
	return u
}

// UpdateFileReference sets the "file_reference" field to the value that was provided on create.
func (u *TelegramBlobUpsert) UpdateFileReference() *TelegramBlobUpsert {
	u.SetExcluded(telegramblob.FieldFileReference)
	return u
}

// SetFileID sets the "file_id" field.
func (u *TelegramBlobUpsert) SetFileID(v int64) *TelegramBlobUpsert {
	u.Set(telegramblob.FieldFileID, v)
	return u
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *TelegramBlobUpsert) UpdateFileID() *TelegramBlobUpsert {
	u.SetExcluded(telegramblob.FieldFileID)
	return u
}

// AddFileID adds v to the "file_id" field.
func (u *TelegramBlobUpsert) AddFileID(v int64) *TelegramBlobUpsert {
	u.Add(telegramblob.FieldFileID, v)
	return u
}

// SetAccessHash sets the "access_hash" field.
func (u *TelegramBlobUpsert) SetAccessHash(v int64) *TelegramBlobUpsert {
	u.Set(telegramblob.FieldAccessHash, v)
	return u
}

// UpdateAccessHash sets the "access_hash" field to the value that was provided on create.
func (u *TelegramBlobUpsert) UpdateAccessHash() *TelegramBlobUpsert {
	u.SetExcluded(telegramblob.FieldAccessHash)
	return u
}

// AddAccessHash adds v to the "access_hash" field.
func (u *TelegramBlobUpsert) AddAccessHash(v int64) *TelegramBlobUpsert {
	u.Add(telegramblob.FieldAccessHash, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TelegramBlob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramblob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramBlobUpsertOne) UpdateNewValues() *TelegramBlobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(telegramblob.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramBlob.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TelegramBlobUpsertOne) Ignore() *TelegramBlobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramBlobUpsertOne) DoNothing() *TelegramBlobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramBlobCreate.OnConflict
// documentation for more info.
func (u *TelegramBlobUpsertOne) Update(set func(*TelegramBlobUpsert)) *TelegramBlobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramBlobUpsert{UpdateSet: update})
	}))
	return u
}

// SetSize sets the "size" field.
func (u *TelegramBlobUpsertOne) SetSize(v int64) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *TelegramBlobUpsertOne) AddSize(v int64) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *TelegramBlobUpsertOne) UpdateSize() *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateSize()
	})
}

// SetPath sets the "path" field.
func (u *TelegramBlobUpsertOne) SetPath(v string) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *TelegramBlobUpsertOne) UpdatePath() *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdatePath()
	})
}

// SetURI sets the "uri" field.
func (u *TelegramBlobUpsertOne) SetURI(v string) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *TelegramBlobUpsertOne) UpdateURI() *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateURI()
	})
}

// SetSha256 sets the "sha256" field.
func (u *TelegramBlobUpsertOne) SetSha256(v string) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetSha256(v)
	})
}

// UpdateSha256 sets the "sha256" field to the value that was provided on create.
func (u *TelegramBlobUpsertOne) UpdateSha256() *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateSha256()
	})
}

// SetFileReference sets the "file_reference" field.
func (u *TelegramBlobUpsertOne) SetFileReference(v []byte) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetFileReference(v)
	})
}

// UpdateFileReference sets the "file_reference" field to the value that was provided on create.
func (u *TelegramBlobUpsertOne) UpdateFileReference() *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateFileReference()
	})
}

// SetFileID sets the "file_id" field.
func (u *TelegramBlobUpsertOne) SetFileID(v int64) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetFileID(v)
	})
}

// AddFileID adds v to the "file_id" field.
func (u *TelegramBlobUpsertOne) AddFileID(v int64) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.AddFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *TelegramBlobUpsertOne) UpdateFileID() *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateFileID()
	})
}

// SetAccessHash sets the "access_hash" field.
func (u *TelegramBlobUpsertOne) SetAccessHash(v int64) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetAccessHash(v)
	})
}

// AddAccessHash adds v to the "access_hash" field.
func (u *TelegramBlobUpsertOne) AddAccessHash(v int64) *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.AddAccessHash(v)
	})
}

// UpdateAccessHash sets the "access_hash" field to the value that was provided on create.
func (u *TelegramBlobUpsertOne) UpdateAccessHash() *TelegramBlobUpsertOne {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateAccessHash()
	})
}

// Exec executes the query.
func (u *TelegramBlobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramBlobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramBlobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TelegramBlobUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TelegramBlobUpsertOne.ID is not supported by MySQL driver. Use TelegramBlobUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TelegramBlobUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TelegramBlobCreateBulk is the builder for creating many TelegramBlob entities in bulk.
type TelegramBlobCreateBulk struct {
	config
	err      error
	builders []*TelegramBlobCreate
	conflict []sql.ConflictOption
}

// Save creates the TelegramBlob entities in the database.
func (_c *TelegramBlobCreateBulk) Save(ctx context.Context) ([]*TelegramBlob, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TelegramBlob, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelegramBlobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TelegramBlobCreateBulk) SaveX(ctx context.Context) []*TelegramBlob {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TelegramBlobCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TelegramBlobCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramBlob.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramBlobUpsert) {
//			SetSize(v+v).
//		}).
//		Exec(ctx)
func (_c *TelegramBlobCreateBulk) OnConflict(opts ...sql.ConflictOption) *TelegramBlobUpsertBulk {
	_c.conflict = opts
	return &TelegramBlobUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramBlob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TelegramBlobCreateBulk) OnConflictColumns(columns ...string) *TelegramBlobUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TelegramBlobUpsertBulk{
		create: _c,
	}
}

// TelegramBlobUpsertBulk is the builder for "upsert"-ing
// a bulk of TelegramBlob nodes.
type TelegramBlobUpsertBulk struct {
	create *TelegramBlobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TelegramBlob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramblob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramBlobUpsertBulk) UpdateNewValues() *TelegramBlobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(telegramblob.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramBlob.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TelegramBlobUpsertBulk) Ignore() *TelegramBlobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramBlobUpsertBulk) DoNothing() *TelegramBlobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramBlobCreateBulk.OnConflict
// documentation for more info.
func (u *TelegramBlobUpsertBulk) Update(set func(*TelegramBlobUpsert)) *TelegramBlobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramBlobUpsert{UpdateSet: update})
	}))
	return u
}

// SetSize sets the "size" field.
func (u *TelegramBlobUpsertBulk) SetSize(v int64) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *TelegramBlobUpsertBulk) AddSize(v int64) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *TelegramBlobUpsertBulk) UpdateSize() *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateSize()
	})
}

// SetPath sets the "path" field.
func (u *TelegramBlobUpsertBulk) SetPath(v string) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *TelegramBlobUpsertBulk) UpdatePath() *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdatePath()
	})
}

// SetURI sets the "uri" field.
func (u *TelegramBlobUpsertBulk) SetURI(v string) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *TelegramBlobUpsertBulk) UpdateURI() *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateURI()
	})
}

// SetSha256 sets the "sha256" field.
func (u *TelegramBlobUpsertBulk) SetSha256(v string) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetSha256(v)
	})
}

// UpdateSha256 sets the "sha256" field to the value that was provided on create.
func (u *TelegramBlobUpsertBulk) UpdateSha256() *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateSha256()
	})
}

// SetFileReference sets the "file_reference" field.
func (u *TelegramBlobUpsertBulk) SetFileReference(v []byte) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetFileReference(v)
	})
}

// UpdateFileReference sets the "file_reference" field to the value that was provided on create.
func (u *TelegramBlobUpsertBulk) UpdateFileReference() *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateFileReference()
	})
}

// SetFileID sets the "file_id" field.
func (u *TelegramBlobUpsertBulk) SetFileID(v int64) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetFileID(v)
	})
}

// AddFileID adds v to the "file_id" field.
func (u *TelegramBlobUpsertBulk) AddFileID(v int64) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.AddFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *TelegramBlobUpsertBulk) UpdateFileID() *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateFileID()
	})
}

// SetAccessHash sets the "access_hash" field.
func (u *TelegramBlobUpsertBulk) SetAccessHash(v int64) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.SetAccessHash(v)
	})
}

// AddAccessHash adds v to the "access_hash" field.
func (u *TelegramBlobUpsertBulk) AddAccessHash(v int64) *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.AddAccessHash(v)
	})
}

// UpdateAccessHash sets the "access_hash" field to the value that was provided on create.
func (u *TelegramBlobUpsertBulk) UpdateAccessHash() *TelegramBlobUpsertBulk {
	return u.Update(func(s *TelegramBlobUpsert) {
		s.UpdateAccessHash()
	})
}

// Exec executes the query.
func (u *TelegramBlobUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TelegramBlobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramBlobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramBlobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
